///////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией работы команды <precommit>
//
// (с) Topaz, LLC
//
///////////////////////////////////////////////////////////////////////////////

#Использовать gitrunner

Перем Лог;
Перем РепозиторийGit;
Перем СценарииОбработки;

///////////////////////////////////////////////////////////////////////////////

Процедура НастроитьКоманду(Знач Команда, Знач Парсер) Экспорт
	
	// Добавление параметров команды
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "КаталогРепозитория", "Каталог анализируемого репозитория");
	
КонецПроцедуры // НастроитьКоманду

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   Приложение - Модуль - Модуль менеджера приложения
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач Приложение) Экспорт
	
	Лог = Приложение.ПолучитьЛог();
	
	КаталогРепозитория = ПараметрыКоманды["КаталогРепозитория"];
	ФайлКаталогРепозитория = Новый Файл(КаталогРепозитория);
	Если НЕ ФайлКаталогРепозитория.Существует() ИЛИ ФайлКаталогРепозитория.ЭтоФайл() Тогда
		
		Лог.Ошибка("Каталог репозитория '%1' не существует или это файл", КаталогРепозитория);
		Возврат Приложение.РезультатыКоманд().НеверныеПараметры;
		
	КонецЕсли;
	
	КаталогРепозитория = ФайлКаталогРепозитория.ПолноеИмя;
	РепозиторийGit = Новый ГитРепозиторий();
	РепозиторийGit.УстановитьРабочийКаталог(КаталогРепозитория);
	
	Если НЕ РепозиторийGit.ЭтоРепозиторий() Тогда
		
		Лог.Ошибка("Каталог '%1' не является репозиторием git", КаталогРепозитория);
		Возврат Приложение.РезультатыКоманд().НеверныеПараметры;
		
	КонецЕсли;
	
	ЖурналИзменений = ПолучитьЖурналИзменений();
	
	Ит = 0;
	Пока Ит < ЖурналИзменений.Количество() Цикл
		
		АнализируемыйФайл = Новый Файл(ОбъединитьПути(КаталогРепозитория, ЖурналИзменений[Ит].ИмяФайла));
		Лог.Отладка("Анализируется файл <%1>", АнализируемыйФайл.Имя);
		Если ЖурналИзменений[Ит].ТипИзменения = ВариантИзмененийФайловGit.Удален
			И ( СтрЧислоВхождений(СтрЗаменить(АнализируемыйФайл.Имя, КаталогРепозитория, ""), "epf") > 0 ИЛИ
			СтрЧислоВхождений(СтрЗаменить(АнализируемыйФайл.Имя, КаталогРепозитория, ""), "erf") > 0 )
		Тогда
			УдалитьФайлИзИндексаГит(ОбъединитьПути(КаталогРепозитория, ЖурналИзменений[Ит].ИмяФайла));
		КонецЕсли;
		
		Ит = Ит + 1;
		
	КонецЦикла;
	
	// При успешном выполнении возвращает код успеха
	Возврат Приложение.РезультатыКоманд().Успех;
	
КонецФункции // ВыполнитьКоманду

Процедура УдалитьФайлИзИндексаГит(Знач ПолныйПуть)
	Лог.Отладка("Удаляю файл из индекса" + ПолныйПуть);
	КодВозврата = Неопределено;
	Вывод = ПолучитьВыводПроцесса("git rm --cached """ + ПолныйПуть + """", КодВозврата);
	Лог.Отладка("Вывод git rm --cached: " + Вывод);
	// Если КодВозврата <> 0 Тогда
	// 	ВызватьИсключение "Не удалось удалить файл из журнала изменений git";
	// КонецЕсли;
КонецПроцедуры

Функция ПолучитьВыводПроцесса(Знач КоманднаяСтрока, КодВозврата)

	ЛогФайл = ВременныеФайлы.НовоеИмяФайла();
	СтрокаЗапуска = "cmd /C """ + КоманднаяСтрока + " > """ + ЛогФайл + """ 2>&1""";
	Лог.Отладка(СтрокаЗапуска);
	ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
	Лог.Отладка("Код возврата: " + КодВозврата);
	ЧтениеТекста = Новый ЧтениеТекста(ЛогФайл, "utf-8");
	Вывод = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Возврат Вывод;

КонецФункции

///////////////////////////////////////////////////////////////////////////////

Функция ПолучитьЖурналИзменений()
	
	ПараметрыКомандыGit = Новый Массив;
	ПараметрыКомандыGit.Добавить("diff-index --name-status --cached HEAD");
	РепозиторийGit.ВыполнитьКоманду(ПараметрыКомандыGit);
	ПараметрыКомандыGit = Новый Массив;
	ПараметрыКомандыGit.Добавить("status --porcelain");
	РепозиторийGit.ВыполнитьКоманду(ПараметрыКомандыGit);
	РезультатВывода = РепозиторийGit.ПолучитьВыводКоманды();
	СтрокиВывода = СтрРазделить(РезультатВывода, Символы.ПС);
	
	ЖурналИзменений = Новый Массив;
	Для Каждого СтрокаВывода Из СтрокиВывода Цикл
		
		Лог.Отладка("	<%1>", СтрокаВывода);
		СтрокаВывода = СокрЛП(СтрокаВывода);
		ПозицияПробела = СтрНайти(СтрокаВывода, " ");
		СимволИзменения = Лев(СтрокаВывода, 1);
		Если СимволИзменения = "?" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТипИзменения = ВариантИзмененийФайловGit.ОпределитьВариантИзменения(СимволИзменения);
		
		ИмяФайла = СокрЛП(СтрЗаменить(Сред(СтрокаВывода, ПозицияПробела + 1), """", ""));
		
		Если ТипИзменения = ВариантИзмененийФайловGit.Переименован
				ИЛИ ТипИзменения = ВариантИзмененийФайловGit.Скопирован Тогда
			
			// это два события - удален и добавлен
			ПозицияСтрелки = СтрНайти(ИмяФайла, "->");
			ИмяФайлаУдален = СокрЛП(Лев(ИмяФайла, ПозицияСтрелки - 1));
			ЖурналИзменений.Добавить(Новый Структура("ИмяФайла, ТипИзменения", ИмяФайлаУдален, ВариантИзмененийФайловGit.Удален));
			Лог.Отладка("		В журнале git %2 файл <%1>", ИмяФайлаУдален, ВариантИзмененийФайловGit.Удален);
			
			ИмяФайла = СокрЛП(Сред(ИмяФайла, ПозицияСтрелки + 2));
			ТипИзменения = ВариантИзмененийФайловGit.Добавлен;
			
		КонецЕсли;
		
		ЖурналИзменений.Добавить(Новый Структура("ИмяФайла, ТипИзменения", ИмяФайла, ТипИзменения));
		Лог.Отладка("		В журнале git %2 файл <%1>", ИмяФайла, ТипИзменения);
		
	КонецЦикла;
	
	Возврат ЖурналИзменений;
	
КонецФункции
