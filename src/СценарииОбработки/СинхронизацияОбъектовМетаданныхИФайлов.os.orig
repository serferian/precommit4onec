///////////////////////////////////////////////////////////////////////////////
// 
// Служебный модуль с реализацией сценариев обработки файлов <СинхронизацияОбъектовМетаданныхИФайлов>
//
///////////////////////////////////////////////////////////////////////////////

Перем КорневойПуть;

// ИмяСценария
//	Возвращает имя сценария обработки файлов
//
// Возвращаемое значение:
//   Строка   - Имя текущего сценария обработки файлов
//
Функция ИмяСценария() Экспорт
	
	Возврат "СинхронизацияОбъектовМетаданныхИФайлов";
	
КонецФункции // ИмяСценария()

// ОбработатьФайл
//	Выполняет обработку файла
//
// Параметры:
//  АнализируемыйФайл		- Файл - Файл из журнала git для анализа
//  КаталогИсходныхФайлов  	- Строка - Каталог расположения исходных файлов относительно каталог репозитория
//  ДополнительныеПараметры - Структура - Набор дополнительных параметров, которые можно использовать 
//  	* Лог  					- Объект - Текущий лог
//  	* ИзмененныеКаталоги	- Массив - Каталоги, которые необходимо добавить в индекс
//		* КаталогРепозитория	- Строка - Адрес каталога репозитория
//		* ФайлыДляПостОбработки	- Массив - Файлы, изменившиеся / образовавшиеся в результате работы сценария
//											и которые необходимо дообработать
//
// Возвращаемое значение:
//   Булево   - Признак выполненной обработки файла
//
Функция ОбработатьФайл(АнализируемыйФайл, КаталогИсходныхФайлов, ДополнительныеПараметры) Экспорт
	
	Лог = ДополнительныеПараметры.Лог;
	НастройкиСценария = ДополнительныеПараметры.Настройки.Получить(ИмяСценария());
	Если АнализируемыйФайл.Существует() И ТипыФайлов.ЭтоФайлОписанияКонфигурации(АнализируемыйФайл) Тогда
		
		Лог.Информация("Обработка файла '%1' по сценарию '%2'", АнализируемыйФайл.ПолноеИмя, ИмяСценария());
		
		Если СинхронизироватьМетаданныеИФайлы(АнализируемыйФайл.ПолноеИмя, ДополнительныеПараметры.ИзмененныеКаталоги) Тогда
			
			ДополнительныеПараметры.ИзмененныеКаталоги.Добавить(АнализируемыйФайл.ПолноеИмя);
			
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ОбработатьФайл()

Функция СинхронизироватьМетаданныеИФайлы(Знач ИмяФайла, УдаленныеФайлы)
	
	СодержимоеФайла = ФайловыеОперации.ПрочитатьТекстФайла(ИмяФайла);
	ДочерниеЭлементы = РегулярныеВыражения.ПолучитьДочерниеЭлементыОписанияКонфигурации(СодержимоеФайла);
	
	Если ДочерниеЭлементы.Количество = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Это те объекты, которые есть в описании конфигурации
	ОбъектыМетаданных = ПолучитьОбъектыМетаданных(ДочерниеЭлементы.Совпадения);
	
	// Список базовых типов метаданных 
	СписокКаталогов = СписокКаталоговТиповМетаданных();
	
	КорневойПуть = Новый Файл(ИмяФайла).Путь;
	СписокДляУдаления = Новый Массив;
	ЕдиныйТекстОшибки = "";
	ТекстОшибок = Новый Массив;
	
	Для Каждого КаталогСписка Из СписокКаталогов Цикл
		
		Если ПроверитьКаталог(КаталогСписка, ОбъектыМетаданных, СписокДляУдаления, ТекстОшибок) Тогда
			Продолжить;
		КонецЕсли;
		
		Каталог = Новый Файл(ОбъединитьПути(КорневойПуть, КаталогСписка.Значение));
		
		// Проверка содержимого каталога
		ВсеФайлыОбъектовТипа = НайтиФайлы(Каталог.ПолноеИмя, "*.xml");
		НадоПропустить = Новый ТаблицаЗначений;
		НадоПропустить.Колонки.Добавить("Имя");
		НадоПропустить.Колонки.Добавить("НормализованноеИмя");
		
		Для Каждого ФайлОбъектаТипа Из ВсеФайлыОбъектовТипа Цикл
			
			Если НадоПропустить.Найти(ФайлОбъектаТипа.ИмяБезРасширения) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Строка = НадоПропустить.Добавить();
			Строка.Имя = ФайлОбъектаТипа.ИмяБезРасширения;
			Строка.НормализованноеИмя = Нормализовать(ФайлОбъектаТипа.ИмяБезРасширения);
			СтруктураОтбора = Новый Структура("ТипМетаданных, ИмяМетаданных",
					КаталогСписка.Представление, ФайлОбъектаТипа.ИмяБезРасширения);
			СуществующиеОбъекты = ОбъектыМетаданных.НайтиСтроки(СтруктураОтбора);
			Если СуществующиеОбъекты.Количество() Тогда
				
				Для Каждого УдаляемаяСтрока Из СуществующиеОбъекты Цикл
					
					ОбъектыМетаданных.Удалить(УдаляемаяСтрока);
					
				КонецЦикла;
				
				Продолжить;
				
			КонецЕсли;
			
			// остатки файлов надо удалить
			СписокДляУдаления.Добавить(ФайлОбъектаТипа.ПолноеИмя);
			ФайлОбъектаТипаКаталог = Новый Файл(ОбъединитьПути(Каталог.ПолноеИмя, ФайлОбъектаТипа.ИмяБезРасширения));
			СписокДляУдаления.Добавить(ФайлОбъектаТипаКаталог.ПолноеИмя);
			
		КонецЦикла;
		
		ВсеФайлыОбъектовТипа = ФайловыеОперации.НайтиКаталоги(Каталог.ПолноеИмя);
		
		Для Каждого ФайлОбъектаТипа Из ВсеФайлыОбъектовТипа Цикл
			
			Если НадоПропустить.Найти(ФайлОбъектаТипа.ИмяБезРасширения) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Ситуация редкая, проверим в самом конце на регистр
			Строки = НадоПропустить.НайтиСтроки(Новый Структура("НормализованноеИмя", Нормализовать(ФайлОбъектаТипа.ИмяБезРасширения)));
			Если Строки.Количество() Тогда
				ОшибкаСтр = СтрШаблон("Имя каталога %2 отличается от метаданного %1. Надо переименовать папку %3", Строки[0].Имя, ФайлОбъектаТипа.ИмяБезРасширения, ФайлОбъектаТипа.ПолноеИмя);
				ТекстОшибок.Добавить(ОшибкаСтр);
				Продолжить;
			КонецЕсли;
			
			// Остатки файлов надо удалить
			СписокДляУдаления.Добавить(ФайлОбъектаТипа.ПолноеИмя);
			
		КонецЦикла;
		
	КонецЦикла;
<<<<<<< HEAD

	МассивИсключенийМетаданных = ПолучитьМассивИсключенийМетаданных();

	// проверка наличия объектов, для которых нет каталогов
	Если ОбъектыМетаданных.Количество() Тогда
				
		Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл

			Если МассивИсключенийМетаданных.Найти(ОбъектМетаданных.ТипМетаданных) <> Неопределено Тогда 
			
				Продолжить;
			
			КонецЕсли;

			ЕдиныйТекстОшибки = ЕдиныйТекстОшибки + ?(ПустаяСтрока(ЕдиныйТекстОшибки), "", Символы.ПС) 
				+ "Отсутствуют файлы для " + ОбъектМетаданных.ТипМетаданных + "." + ОбъектМетаданных.ИмяМетаданных;

		КонецЦикла;
||||||| 2c67f37

	МассивИсключенийМетаданных = ПолучитьМассивИсключенийМетаданных();

	// проверка наличия объектов, для которых нет каталогов
	Если ОбъектыМетаданных.Количество() Тогда
				
		Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
			
			Если МассивИсключенийМетаданных.Найти(ОбъектМетаданных.ТипМетаданных) <> Неопределено Тогда 
			
				Продолжить;
			
			КонецЕсли;

			ЕдиныйТекстОшибки = ЕдиныйТекстОшибки + ?(ПустаяСтрока(ЕдиныйТекстОшибки), "", Символы.ПС) 
				+ "Отсутствуют файлы для " + ОбъектМетаданных.ТипМетаданных + "." + ОбъектМетаданных.ИмяМетаданных;

		КонецЦикла;
=======
>>>>>>> develop
	
	ПеренестиМетаданныеВОшибку(ОбъектыМетаданных, ТекстОшибок);
	
	// Разбор файлов для удаления в строку с ошибкой 
	Если СписокДляУдаления.Количество() Тогда
		
		СтрокаОшибки = "Необходимо удалить файлы ";
		СтрокаОшибки = СтрокаОшибки + СтрСоединить(СписокДляУдаления, Символы.ПС + СтрокаОшибки);
		ТекстОшибок.Добавить(СтрокаОшибки);
		
	КонецЕсли;
	
	ЕдиныйТекстОшибки = СтрСоединить(ТекстОшибок, Символы.ПС);
	
	Если НЕ ПустаяСтрока(ЕдиныйТекстОшибки) Тогда
		
		ВызватьИсключение ЕдиныйТекстОшибки;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьМассивИсключенийМетаданных()
	
	МассивИсключений = Новый Массив();
	МассивИсключений.Добавить("Sequence");
	
	Возврат МассивИсключений;
	
КонецФункции

Функция СписокКаталоговТиповМетаданных()
	
	Список = Новый СписокЗначений();
	Список.Добавить("AccumulationRegisters", "AccumulationRegister");
	Список.Добавить("BusinessProcesses", "BusinessProcess");
	Список.Добавить("Catalogs", "Catalog");
	Список.Добавить("ChartsOfCalculationTypes", "ChartOfCalculationTypes");
	Список.Добавить("ChartsOfCharacteristicTypes", "ChartOfCharacteristicTypes");
	Список.Добавить("CalculationRegisters", "CalculationRegister");
	Список.Добавить("CommandGroups", "CommandGroup");
	Список.Добавить("CommonAttributes", "CommonAttribute");
	Список.Добавить("CommonCommands", "CommonCommand");
	Список.Добавить("CommonForms", "CommonForm");
	Список.Добавить("CommonModules", "CommonModule");
	Список.Добавить("CommonPictures", "CommonPicture");
	Список.Добавить("CommonTemplates", "CommonTemplate");
	Список.Добавить("Constants", "Constant");
	Список.Добавить("DataProcessors", "DataProcessor");
	Список.Добавить("DefinedTypes", "DefinedType");
	Список.Добавить("DocumentJournals", "DocumentJournal");
	Список.Добавить("DocumentNumerators", "DocumentNumerator");
	Список.Добавить("Documents", "Document");
	Список.Добавить("Enums", "Enum");
	Список.Добавить("EventSubscriptions", "EventSubscription");
	Список.Добавить("ExchangePlans", "ExchangePlan");
	Список.Добавить("FilterCriteria", "FilterCriterion");
	Список.Добавить("FunctionalOptions", "FunctionalOption");
	Список.Добавить("FunctionalOptionsParameters", "FunctionalOptionsParameter");
	Список.Добавить("HTTPServices", "HTTPService");
	Список.Добавить("InformationRegisters", "InformationRegister");
	Список.Добавить("Languages", "Language");
	Список.Добавить("Reports", "Report");
	Список.Добавить("Roles", "Role");
	Список.Добавить("ScheduledJobs", "ScheduledJob");
	Список.Добавить("SessionParameters", "SessionParameter");
	Список.Добавить("SettingsStorages", "SettingsStorage");
	Список.Добавить("StyleItems", "StyleItem");
	Список.Добавить("Sequences", "Sequence");
	Список.Добавить("Styles", "Style");
	Список.Добавить("Subsystems", "Subsystem");
	Список.Добавить("Tasks", "Task");
	Список.Добавить("WebServices", "WebService");
	Список.Добавить("WSReferences", "WSReference");
	Список.Добавить("XDTOPackages", "XDTOPackage");
	Список.Добавить("ExternalDataSources", "ExternalDataSource");
	Список.Добавить("ChartsOfAccounts", "ChartOfAccounts");
	Список.Добавить("AccountingRegisters", "AccountingRegister");
	Возврат Список;
	
КонецФункции

// В данном случае для нормализации используются символы с которых не может начинаться имя метаданного в 1С для того, 
// чтобы не вызвать пересечение при приведении к регистру
Функция Нормализовать(ИмяМетаданного)
	Возврат ВРег("%" + ИмяМетаданного);
КонецФункции

Функция ПолучитьОбъектыМетаданных(КоллекцияСовпадений)
	
	
	ОбъектыМетаданных = Новый ТаблицаЗначений;
	ОбъектыМетаданных.Колонки.Добавить("ТипМетаданных");
	ОбъектыМетаданных.Колонки.Добавить("ИмяМетаданных");
	
	Для Каждого ОбъектМетаданных Из КоллекцияСовпадений Цикл
		
		НоваяЗапись = ОбъектыМетаданных.Добавить();
		НоваяЗапись.ТипМетаданных = ОбъектМетаданных.Группы[1].Значение;
		НоваяЗапись.ИмяМетаданных = ОбъектМетаданных.Группы[2].Значение;
		
	КонецЦикла;
	
	ОбъектыМетаданных.Свернуть("ТипМетаданных, ИмяМетаданных", "");
	
	Возврат ОбъектыМетаданных;
	
КонецФункции

Функция ПроверитьКаталог(КаталогСписка, ОбъектыМетаданных, СписокДляУдаления, ТекстОшибок)
	
	ОстановитьПроверкуКаталога = Ложь;
	
	ОбъектыМетаданныхТипа = ОбъектыМетаданных.НайтиСтроки(Новый Структура("ТипМетаданных", КаталогСписка.Представление));
	
	Каталог = Новый Файл(ОбъединитьПути(КорневойПуть, КаталогСписка.Значение));
	
	Если НЕ Каталог.Существует() Тогда
		
		Если ОбъектыМетаданныхТипа.Количество() Тогда
			
			// каталога нет, а должен быть
			ТекстОшибок.Добавить(СтрШаблон("Отсутствует каталог %1", КаталогСписка.Значение));
		КонецЕсли;
		
		ОстановитьПроверкуКаталога = Истина;
		
	КонецЕсли;
	
	// Если типа метаданных нет, то просто удаляем каталог
	Если НЕ ОстановитьПроверкуКаталога И НЕ ОбъектыМетаданныхТипа.Количество() Тогда
		
		СписокДляУдаления.Добавить(Каталог.ПолноеИмя);
		ОстановитьПроверкуКаталога = Истина;
		
	КонецЕсли;
	
	Возврат ОстановитьПроверкуКаталога;
	
КонецФункции

Процедура ПеренестиМетаданныеВОшибку(ОбъектыМетаданных, ТекстОшибок)
	
	МассивИсключенийМетаданных = ПолучитьМассивИсключенийМетаданных();
	
	// проверка наличия оставшихся объектов, для которых нет каталогов
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		
		Если МассивИсключенийМетаданных.Найти(ОбъектМетаданных.ТипМетаданных) <> Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекстОшибок.Добавить(СтрШаблон("Отсутствуют файлы для %1.%2", ОбъектМетаданных.ТипМетаданных, ОбъектМетаданных.ИмяМетаданных));
		
	КонецЦикла;
	
КонецПроцедуры